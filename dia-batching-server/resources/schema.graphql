schema {
  query: Query
}

type Query {
  bundleById(id:ID!):Bundle!
}

scalar DateTime
scalar BigInt
scalar Bytes
scalar JSON

type OraclePrice {
  id: ID!
  symbol: String!
  name: String!
  blockchain: String!
  timestamp: DateTime!
  "BigDecimal"
  price: String!
  "BigDecimal"
  supply: String!
  decimals: Int!
}

type Transfer {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  extrinsicHash: String
  from: String!
  to: String!
  amount: BigInt!
  fee: BigInt! # fee is calculated at the best effort and may be zero for some old extrinsics
  remark: String
}

type ZenlinkInfo {
  id: ID!
  updatedDate: DateTime!
  "BigDecimal"
  totalVolumeUSD: String!
  "BigDecimal"
  totalTvlUSD: String!
  # transactions
  txCount: Int!

  factory: Factory!
  stableSwapInfo: StableSwapInfo!
}

type Factory {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume
  "BigDecimal"
  totalVolumeUSD: String!
  "BigDecimal"
  totalVolumeETH: String!

  # untracked values - less confident USD scores
  "BigDecimal"
  untrackedVolumeUSD: String!

  # total liquidity
  "BigDecimal"
  totalLiquidityUSD: String!
  "BigDecimal"
  totalLiquidityETH: String!

  # transactions
  txCount: Int!
}

type StableSwapInfo {
  id: ID!
  poolCount: Int!

  # total volume
  "BigDecimal"
  totalVolumeUSD: String!

  "BigDecimal"
  totalTvlUSD: String!
  # transactions
  txCount: Int!

  swaps: [StableSwap!]! 
}

type StableSwap {
  id: ID!

  # swap address
  address: String!

  # base swap address
  baseSwapAddress: String!

  # number of tokens supported
  numTokens: Int!

  # supported tokens
  tokens: [String!]!

  # supported base tokens (for SwapNormal, this is same as tokens; for MetaSwap, this is the corresbonding base pool tokens)
  baseTokens: [String!]!

  # supported all tokens (metapool tokens plus basepool tokens)
  allTokens: [String!]!

  # token balances
  balances: [String!]!

  # liquidity provider token
  lpToken: String!
  lpTotalSupply: String!

  # amplification coefficient
  a: BigInt!

  swapFee: BigInt!
  adminFee: BigInt!

  virtualPrice: BigInt!

  stableSwapInfo: StableSwapInfo!

  events: [StableSwapEvent!]

  exchanges: [StableSwapExchange!]

  stableSwapDayData: [StableSwapDayData!]
  stableSwapHourData: [StableSwapHourData!]

  farm: [Farm!]

  "BigDecimal"
  tvlUSD: String!
  "BigDecimal"
  volumeUSD: String!

  # " APR "
  # apr: BigDecimal!
  # " When APR was last updated "
  # aprUpdatedAtTimestamp: BigInt!
}

type StableSwapEvent {
  id: ID!

  stableSwap: StableSwap!

  data: StableSwapEventData

  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

union StableSwapEventData =
  StableSwapNewFeeEventData
  | StableSwapRampAEventData
  | StableSwapStopRampAEventData
  | StableSwapAddLiquidityEventData
  | StableSwapRemoveLiquidityEventData
  | StableSwapFlashLoanEventData

type StableSwapNewFeeEventData {
  swapFee: BigInt!
  adminFee: BigInt!
}

type StableSwapRampAEventData {
  oldA: BigInt!
  newA: BigInt!
  initialTime: BigInt!
  futureTime: BigInt!
}

type StableSwapStopRampAEventData {
  currentA: BigInt!
  time: BigInt!
}

type StableSwapAddLiquidityEventData {
  provider: Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
}

type StableSwapRemoveLiquidityEventData {
  provider: Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  lpTokenSupply: BigInt
}

type StableSwapFlashLoanEventData {
  caller: Bytes!
  receiver: Bytes!
  amountsOut: [BigInt!]!
}

type StableSwapExchange {
  id: ID!

  stableSwap: StableSwap!

  data: StableSwapExchangeData

  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

union StableSwapExchangeData =
  StableSwapTokenExchangeData
  | StableSwapTokenExchangeUnderlyingData

type StableSwapTokenExchangeData {
  buyer: Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
}

type StableSwapTokenExchangeUnderlyingData {
  buyer: Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
}

type Token {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: Int!

  # used for other stats like marketcap
  totalSupply: String!

  # token specific volume
  "BigDecimal"
  tradeVolume: String!
  "BigDecimal"
  tradeVolumeUSD: String!
  "BigDecimal"
  untrackedVolumeUSD: String!

  # transactions across all pairs
  txCount: Int!

  # liquidity across all pairs
  "BigDecimal"
  totalLiquidity: String!

  # derived prices
  "BigDecimal"
  derivedETH: String!

  tokenDayData: [TokenDayData!]!
  pairDayDataBase: [PairDayData!]!
  pairDayDataQuote: [PairDayData!]!
  pairBase: [Pair!]!
  pairQuote: [Pair!]!
}

type TokenTransfer {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  extrinsicHash: String
  from: String!
  to: String!
  currencyId: String!
  amount: BigInt!
  remark: String
}

type TokenDeposit {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  extrinsicHash: String
  who: String!
  currencyId: String!
  amount: BigInt!
}

type TokenWithdrawn {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  extrinsicHash: String
  who: String!
  currencyId: String!
  amount: BigInt!
}

type Pair {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  "BigDecimal"
  reserve0: String!
  "BigDecimal"
  reserve1: String!
  "BigDecimal"
  totalSupply: String!

  # derived liquidity
  "BigDecimal"
  reserveETH: String!
  "BigDecimal"
  reserveUSD: String!
  # used for separating per pair reserves and global
  "BigDecimal"
  trackedReserveETH: String!

  # Price in terms of the asset pair
  "BigDecimal"
  token0Price: String!
  "BigDecimal"
  token1Price: String!

  # lifetime volume stats
  "BigDecimal"
  volumeToken0: String!
  "BigDecimal"
  volumeToken1: String!
  "BigDecimal"
  volumeUSD: String!
  "BigDecimal"
  untrackedVolumeUSD: String!
  txCount: Int!

  # creation stats
  createdAtTimestamp: DateTime!
  createdAtBlockNumber: BigInt!

  " APR "
  # apr: BigDecimal!
  # " When APR was last updated "
  # aprUpdatedAtTimestamp: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: Int! # used to detect new exchanges
  # derived fields
  pairHourData: [PairHourData!]!
  pairDayData: [PairDayData!]!
  liquidityPositions: [LiquidityPosition!]!
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]!
 
  mints: [Mint!]!
  burns: [Burn!]!
  swaps: [Swap!]!
  farm: [Farm!]
}

type User {
  # user address
  id: ID!
  liquidityPositions: [LiquidityPosition!]
  stableSwapLiquidityPositions: [StableSwapLiquidityPosition!]
  stakePositions: [StakePosition!]
  # singleTokenLockPositions repeat with stake Positions
  "BigDecimal"
  usdSwapped: String!
}

type LiquidityPosition {
  id: ID!
  user: User!
  pair: Pair!
  "BigDecimal"
  liquidityTokenBalance: String!
}

type StableSwapLiquidityPosition {
  id: ID!
  user: User!
  stableSwap: StableSwap!
  liquidityTokenBalance: String!
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: DateTime! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: Pair! # reference to pair
  "BigDecimal"
  token0PriceUSD: String! # snapshot of token0 price
  "BigDecimal"
  token1PriceUSD: String! # snapshot of token1 price
  "BigDecimal"
  reserve0: String! # snapshot of pair token0 reserves
  "BigDecimal"
  reserve1: String! # snapshot of pair token1 reserves
  "BigDecimal"
  reserveUSD: String! # snapshot of pair reserves in USD
  "BigDecimal"
  liquidityTokenTotalSupply: String! # snapshot of pool token supply
  "BigDecimal"
  liquidityTokenBalance: String! # snapshot of users pool token balance
}

type Transaction {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: DateTime!
  mints: [ID!]!
  burns: [ID!]!
  swaps: [ID!]!
}

type Mint {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: DateTime! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  to: String!
  liquidity: String!

  # populated from the Mint event
  sender: String
  amount0: String
  amount1: String
  logIndex: Int
  # derived amount based on available prices of tokens
  amountUSD: String

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: String
  feeLiquidity: String
}

type Burn {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: DateTime! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  liquidity: String!

  # populated from the Burn event
  sender: String
  amount0: String
  amount1: String
  to: String
  logIndex: Int
  # derived amount based on available prices of tokens
  amountUSD: String

  # mark uncomplete in ETH case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: String
  feeLiquidity: String
}

type Swap {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: DateTime! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: String!
  from: String! # the EOA that initiated the txn
  amount0In: String!
  amount1In: String!
  amount0Out: String!
  amount1Out: String!
  to: String!
  logIndex: Int

  # derived info
  amountUSD: String!
}

type Bundle {
  id: ID!
  "BigDecimal"
  ethPrice: String! # price of ETH usd
}

type FactoryDayData {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: DateTime!

  dailyVolumeETH: String!
  dailyVolumeUSD: String!
  dailyVolumeUntracked: String!

  totalVolumeETH: String!
  totalLiquidityETH: String!
  totalVolumeUSD: String! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: String!

  txCount: Int!
}

type PairHourData {
  id: ID!
  hourStartUnix: BigInt! # unix timestamp for start of hour
  pair: Pair!

  # reserves
  reserve0: String!
  reserve1: String!

  # total supply for LP historical returns
  totalSupply: String!

  # derived liquidity
  reserveUSD: String!

  # volume stats
  hourlyVolumeToken0: String!
  hourlyVolumeToken1: String!
  hourlyVolumeUSD: String!
  hourlyTxns: Int!

  # " Used to calculate apr "
  # cumulativeVolumeUSD: BigDecimal!
  # apr: BigDecimal!
}

type PairDayData {
  id: ID!
  date: DateTime!
  pairAddress: String!
  pair: Pair!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: String!
  reserve1: String!

  # total supply for LP historical returns
  totalSupply: String!

  # derived String
  reserveUSD: String!

  # volume stats
  dailyVolumeToken0: String!
  dailyVolumeToken1: String!
  dailyVolumeUSD: String!
  dailyTxns: Int!

  # " Used to calculate apr "
  # cumulativeVolumeUSD: BigDecimal!
  # apr: BigDecimal!
}

type TokenDayData {
  id: ID!
  date: DateTime!
  token: Token!

  # volume stats
  dailyVolumeToken: String!
  dailyVolumeETH: String!
  dailyVolumeUSD: String!
  dailyTxns: Int!

  # liquidity stats
  totalLiquidityToken: String!
  totalLiquidityETH: String!
  totalLiquidityUSD: String!

  # price stats
  priceUSD: String!
}

type StableSwapDayData {
  id: ID!
  date: DateTime!
  stableSwap: StableSwap!

  dailyVolumeUSD: String!
  tvlUSD: String!

  #   " Used to calculate apr "
  # cumulativeVolumeUSD: BigDecimal!
  # apr: BigDecimal!
}

type StableSwapHourData {
  id: ID!
  hourStartUnix: BigInt! # unix timestamp for start of hour
  stableSwap: StableSwap!

  hourlyVolumeUSD: String!
  tvlUSD: String!
  #     " Used to calculate apr "
  # cumulativeVolumeUSD: BigDecimal!
  # apr: BigDecimal!
}

type StableDayData {
  id: ID!
  date: DateTime!

  dailyVolumeUSD: String!
  tvlUSD: String!
}

type ZenlinkDayInfo {
  id: ID!
  date: DateTime!

  standardInfo: FactoryDayData!
  stableInfo: StableSwapDayData!

  dailyVolumeUSD: String!
  tvlUSD: String!
}

type ZLKInfo {
  id: ID!
  updatedDate: DateTime!
  burn: BigInt!
}

type SingleTokenLockDayData {
  id: ID!
  singleTokenLock: SingleTokenLock!
  date: DateTime!
  totalLiquidity: String!
  totalLiquidityUSD: String!
  totalLiquidityETH: String!

  # " Used to calculate apr "
  # rewardUSD: BigDecimal!
  # apr: BigDecimal!
}

type SingleTokenLockHourData {
  id: ID!
  hourStartUnix: BigInt! # unix timestamp for start of hour
  singleTokenLock: SingleTokenLock!
  totalLiquidity: String!
  totalLiquidityUSD: String!
  totalLiquidityETH: String!
  # " Used to calculate apr "
  # rewardUSD: BigDecimal!
  # apr: BigDecimal!
}

type SingleTokenLock {
  id: ID!
  token: Token!
  # total liquidity
  "BigDecimal"
  totalLiquidityUSD: String!
  "BigDecimal"
  totalLiquidity: String!
  totalLiquidityETH: String!
  singleTokenLockDayData: [SingleTokenLockDayData!]
  singleTokenLockHourData: [SingleTokenLockHourData!]
  farm: [Farm!]
}

type StakePosition {
  id: ID!
  user: User!
  farm: Farm!
  liquidityStakedBalance: BigInt!
}

# type StakePositionSnapShot {
#   id: ID!
#   user: User!
#   farm: Farm!
#   stakePosition: StakePosition!
#   # liquidityStakedBalance: BigInt!
# }

# type PoolId = SingleTokenLock

# type PairFarm {
#   pair: Pair
#   farm: Farm
# }

# type StableSwapFarm {
#   stableSwap: StableSwap
#   farm: Farm
# }

# type SingleTokenLockFarm {
#   singleTokenLock: SingleTokenLock
#   farm: Farm
# }

type Farm {
  id: ID!
  pid: BigInt!
  singleTokenLock: SingleTokenLock
  stableSwap: StableSwap
  pair: Pair
  stakeToken: String!
  liquidityStaked: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!

  # stake apr
  stakedUSD: String!
  rewardUSDPerDay: String!
  stakeApr: String!
  incentives: [Incentive!]!
  stakePositions: [StakePosition!]
}

type Incentive {
  id: ID!
  farm: Farm!
  rewardToken: Token!
  rewardPerDay: String!
}

# Nabla entities

type Router {
  id: ID! # id can be the address of the router contract
  swapPools: [SwapPool!]
  backstopPools: [BackstopPool!]
  paused: Boolean! # whether the router is paused
}

type NablaToken {
  id: ID! # id can be the address of the token contract
  decimals: Int! # number of decimal places the token can be split into
  name: String! # name of the token
  symbol: String! # ticker symbol of the token
}

type SwapPool {
  id: ID! # id can be the address of the swap pool contract
  router: Router! # link to the Router entity
  backstop: BackstopPool! # link to the BackstopPool entity
  token: NablaToken! # link to the Token entity
  reserves: BigInt! # current balance of the pool
  liabilities: BigInt! # total Liquidity Provider (LP) deposits
  totalSupply: BigInt! # total supply of LP tokens
  paused: Boolean! # whether the swap pool is paused
}

type BackstopPool {
  id: ID! # id can be the address of the backstop pool contract
  router: Router! # link to the Router entity
  token: NablaToken! # link to the NablaToken entity
  reserves: BigInt! # current balance of the pool
  liabilities: BigInt! # total Liquidity Provider (LP) deposits
  totalSupply: BigInt! # total supply of LP tokens
  paused: Boolean! # whether the backstop pool is paused
}

type Block {
  "BlockHeight-blockHash - e.g. 0001812319-0001c"
  id: ID!
  height: Int!
  hash: Bytes!
  parentHash: Bytes!
  stateRoot: Bytes!
  extrinsicsicRoot: Bytes!
  specName: String!
  specVersion: Int!
  implName: String!
  implVersion: Int!
  timestamp: DateTime!
  validator: Bytes

  extrinsicsCount: Int!
  callsCount: Int!
  eventsCount: Int!

  extrinsics: [Extrinsic]!
  calls: [Call]!
  events: [Event]!
}

type ExtrinsicSignature {
  address: JSON
  signature: JSON
  signedExtensions: JSON
}

type Extrinsic {
  id: ID!

  block: Block!
  call: Call!

  index: Int!
  version: Int!
  signature: ExtrinsicSignature
  tip: BigInt
  fee: BigInt
  success: Boolean
  error: JSON
  hash: Bytes!

  calls: [Call]!
  events: [Event]!
}

type Call {
  id: ID!

  block: Block!
  extrinsic: Extrinsic
  parent: Call

  address: [Int!]!
  success: Boolean!
  error: JSON

  pallet: String!
  name: String!

  args: JSON
  argsStr: [String]

  subcalls: [Call]!
  events: [Event]!
}

type Event {
  id: ID!

  block: Block!
  extrinsic: Extrinsic
  call: Call

  index: Int!
  phase: String!

  pallet: String!
  name: String!

  args: JSON
  argsStr: [String]
}

enum CounterLevel {
  Global
  Pallet
  Item
}

enum ItemType {
  Extrinsics
  Calls
  Events
}

type ItemsCounter {
  id: ID!
  type: ItemType!
  level: CounterLevel!
  total: Int!
}